#!/bin/sh

. ./shpy

testWithNoArguments_ShouldReturnUsage() {
    local output
    output=$(createSpy)

    assertFalse 'returns error' $?
    printf '%s\n' "$output" | grep -q '^Usage:'
    assertTrue 'begins with "Usage:"' $?
}

testWithOneArgument_ShouldCreateFunction() {
    createSpy dosomething || fail 'createSpy dosomething'

    type -t dosomething | grep -q function
    assertTrue 'dosomething is a function' $?
}

testShouldStubReturnValue() {
    createSpy -r 123 dosomething || fail 'createSpy dosomething'

    dosomething

    assertEquals 'return value equals passed val' 123 $?
}

testShouldStubReturnValue_PerSpy() {
    createSpy -r 123 dosomething || fail 'createSpy -r 123 dosomething'
    createSpy -r 234 domore || fail 'createSpy -r 234 domore'

    dosomething
    assertEquals 'dosomething return value is 123' 123 $?
    domore
    assertEquals 'domore return value is 234' 234 $?
}

testShouldResetStubReturnValue() {
    createSpy -r 123 dosomething || fail 'createSpy -r 123 dosomething'

    createSpy dosomething

    dosomething
    assertTrue 'dosomething returns the default -- success' $?
}

testShouldStubOutput() {
    local output
    local output_arg='some
output'
    createSpy -o "$output_arg" dosomething || fail 'createSpy dosomething'

    output=$(dosomething)

    assertTrue '`dosomething` succeeds' $?
    assertEquals 'output is the passed value' 'some
output' "$output"
}

testShouldResetStubOutput() {
    local output
    createSpy -o 'some output' dosomething || fail 'createSpy dosomething'

    output=$(createSpy dosomething)

    assertTrue '`createSpy dosomething` succeeds' $?
    assertNull 'output is unset' "$output"
}

testShouldResetCallCount() {
    createSpy dosomething || fail 'createSpy dosomething'
    dosomething

    createSpy dosomething

    assertTrue '`createSpy dosomething` succeeds' $?
    assertEquals 0 "$(getSpyCallCount dosomething)"
}

oneTimeTearDown() {
    cleanupSpies
}

. shunit2
