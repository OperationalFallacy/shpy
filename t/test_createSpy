#!/bin/sh

readonly TEST_DIR="$(dirname "$0")"

# shellcheck source=/dev/null
. "$TEST_DIR/../shpy"

testWithNoArguments_ShouldReturnUsage() {
    # shellcheck disable=SC2039
    local output
    output=$(createSpy)

    assertFalse 'returns error' $?
    printf '%s\n' "$output" | grep -q '^Usage:'
    assertTrue 'begins with "Usage:"' $?
}

testWithNoArguments_ShouldDieWithUnsupportedFlags() {
    # shellcheck disable=SC2039
    local output
    output=$(createSpy -z 2>&1)

    assertFalse 'returns error' $?
    assertEquals 'Error: Unknown option -z' "$output"
}

testWithNoArguments_ShouldDieWhenRequiredArgumentIsMissing() {
    # shellcheck disable=SC2039
    local output
    output=$(createSpy -r dosomething 2>&1)

    assertFalse 'returns error' $?
    assertEquals 'Error: Missing spy name' "$output"
}

testWithOneArgument_ShouldCreateFunction() {
    createSpy dosomething || fail 'createSpy dosomething'

    command -V dosomething | grep -q function
    assertTrue 'dosomething is a function' $?
}

testShouldStubReturnValue() {
    createSpy -r 123 dosomething || fail 'createSpy dosomething'

    dosomething

    assertEquals 'return value equals passed val' 123 $?
}

testShouldStubReturnValue_PerSpy() {
    createSpy -r 123 dosomething || fail 'createSpy -r 123 dosomething'
    createSpy -r 234 domore || fail 'createSpy -r 234 domore'

    dosomething
    assertEquals 'dosomething return value is 123' 123 $?
    domore
    assertEquals 'domore return value is 234' 234 $?
}

testShouldResetStubReturnValue() {
    createSpy -r 123 dosomething || fail 'createSpy -r 123 dosomething'

    createSpy dosomething

    dosomething
    assertTrue 'dosomething returns the default -- success' $?
}

testShouldStubMultipleReturnValues() {
    createSpy -r 2 -r 1 -r 0 dosomething || fail 'createSpy dosomething'

    dosomething
    assertEquals 'first return value equals first passed val' 2 $?

    dosomething
    assertEquals 'second return value equals second passed val' 1 $?

    dosomething
    assertEquals 'third return value equals third passed val' 0 $?

    dosomething
    assertEquals 'subsequent return values equal last passed val' 0 $?
}


testShouldStubOutput() {
    # shellcheck disable=SC2039
    local output
    # shellcheck disable=SC2039
    local output_arg='some
output'
    createSpy -o "$output_arg" dosomething || fail 'createSpy dosomething'

    output=$(dosomething)

    assertTrue "\`dosomething\` succeeds" $?
    assertEquals 'output is the passed value' 'some
output' "$output"
}

testShouldStubMultipleOutputs() {
    local first_output second_output third_output actual_output
    first_output="first output"
    second_output="second OUTPUT"
    third_output="Third Output"

    createSpy -o "${first_output}" -o "${second_output}" -o "${third_output}" dosomething || fail 'createSpy -o MULTIPLE dosomething'
  
    actual_output=$(dosomething)
    assertEquals 'first output equals first passed val' "${first_output}" "${actual_output}"

    actual_output=$(dosomething)
    assertEquals 'second output equals second passed val' "${second_output}" "${actual_output}"

    actual_output=$(dosomething)
    assertEquals 'third output equals third passed val' "${third_output}" "${actual_output}"

    actual_output=$(dosomething)
    assertEquals 'subsequent outputs equal last passed val' "${third_output}" "${actual_output}"
}

testShouldResetStubOutput() {
    # shellcheck disable=SC2039
    local output
    createSpy -o 'some output' dosomething || fail 'createSpy dosomething'

    output=$(createSpy dosomething)

    assertTrue "\`createSpy dosomething\` succeeds" $?
    assertNull 'output is unset' "$output"
}

testShouldStubErrorOutput() {
    # shellcheck disable=SC2039
    local error_output
    # shellcheck disable=SC2039
    local error_output_arg='some
output'
    createSpy -e "$error_output_arg" dosomething || fail 'createSpy dosomething'

    error_output=$(dosomething 2>&1 >/dev/null)

    assertTrue "\`dosomething\` succeeds" $?
    assertEquals 'error output is the passed value' 'some
output' "$error_output"
}

testShouldResetStubErrorOutput() {
    # shellcheck disable=SC2039
    local error_output
    createSpy -e 'some output' dosomething || fail 'createSpy dosomething'

    error_output=$(createSpy dosomething)

    assertTrue "\`createSpy dosomething\` succeeds" $?
    assertNull 'output is unset' "$error_output"
}

testShouldStubOutputErrorLast() {
    # shellcheck disable=SC2039
    local combined_output
    createSpy -o 'stdout' -e 'stderr' dosomething || fail 'createSpy dosomething'

    combined_output=$(dosomething 2>&1)

    assertTrue "\`dosomething\` succeeds" $?
    assertEquals 'error output is after standard output' 'stdoutstderr' "$combined_output"
}

testShouldResetCallCount() {
    createSpy dosomething || fail 'createSpy dosomething'
    dosomething

    createSpy dosomething

    assertTrue "\`createSpy dosomething\` succeeds" $?
    assertEquals 0 "$(getSpyCallCount dosomething)"
}

oneTimeTearDown() {
    cleanupSpies
}

# shellcheck source=/dev/null
. "$TEST_DIR/shunit2"
